@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":FlashcardAppParser" as FlashcardAppParser LOGIC_COLOR
participant ":ExportCommandParser" as ExportCommandParser LOGIC_COLOR
participant "exportCommand:ExportCommand" as ExportCommand LOGIC_COLOR
participant "result:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":ModelManager" as Model MODEL_COLOR
end box

[-> LogicManager : execute("export myCards.csv")
activate LogicManager

LogicManager -> FlashcardAppParser : parseCommand("export myCards.csv")
activate FlashcardAppParser

create ExportCommandParser
FlashcardAppParser -> ExportCommandParser
activate ExportCommandParser

ExportCommandParser --> FlashcardAppParser
deactivate ExportCommandParser

FlashcardAppParser -> ExportCommandParser: parse("myCards.csv")
activate ExportCommandParser

create ExportCommand
ExportCommandParser -> ExportCommand
activate ExportCommand

ExportCommand --> ExportCommandParser:exportCommand
deactivate ExportCommand

ExportCommandParser --> FlashcardAppParser:exportCommand
deactivate ExportCommandParser

FlashcardAppParser --> LogicManager:exportCommand
deactivate FlashcardAppParser

LogicManager -> ExportCommand : execute()
activate ExportCommand

ExportCommand -> Model : getFilteredFlashcardList()
activate Model

Model --> ExportCommand: flashcards
deactivate Model

ExportCommand -> ExportCommand: flashcardListToCsvFormat(flashcards)
activate ExportCommand
ExportCommand --> ExportCommand: csvContent
deactivate ExportCommand

ref over ExportCommand
    export to CSV
end

create CommandResult
ExportCommand -> CommandResult
activate CommandResult

CommandResult --> ExportCommand:result
deactivate CommandResult

ExportCommand --> LogicManager : result
deactivate ExportCommand

[<--LogicManager:result
deactivate LogicManager
@enduml

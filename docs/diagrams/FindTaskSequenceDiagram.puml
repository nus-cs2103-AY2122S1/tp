@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":NurseyBookParser" as NurseyBookParser LOGIC_COLOR
participant ":FindTaskCommandParser" as FindTaskCommandParser LOGIC_COLOR
participant "f:FindTaskCommand" as FindTaskCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant "p:DescriptionContainsKeywordPredicate" as DescriptionContainsKeywordPredicate MODEL_COLOR
end box

[-> LogicManager : execute("findTask Pfizer")
activate LogicManager

LogicManager -> NurseyBookParser : parseCommand("findTask Pfizer")
activate NurseyBookParser

create FindTaskCommandParser
NurseyBookParser -> FindTaskCommandParser
activate FindTaskCommandParser

FindTaskCommandParser --> NurseyBookParser
deactivate FindTaskCommandParser

NurseyBookParser -> FindTaskCommandParser : parse("Pfizer")
activate FindTaskCommandParser

create DescriptionContainsKeywordPredicate
FindTaskCommandParser -> DescriptionContainsKeywordPredicate : DescriptionContainsKeywordPredicate({"Pfizer"})
activate DescriptionContainsKeywordPredicate

DescriptionContainsKeywordPredicate --> FindTaskCommandParser : p
deactivate DescriptionContainsKeywordPredicate

create FindTaskCommand
FindTaskCommandParser -> FindTaskCommand : FindTaskCommand(p)
activate FindTaskCommand

FindTaskCommand --> FindTaskCommandParser : f
deactivate FindTaskCommand

FindTaskCommandParser --> NurseyBookParser : f
deactivate FindTaskCommandParser

FindTaskCommandParser -[hidden]-> NurseyBookParser
destroy FindTaskCommandParser

NurseyBookParser --> LogicManager : f
deactivate NurseyBookParser

LogicManager -> FindTaskCommand : execute()
activate FindTaskCommand

FindTaskCommand -> Model : updateFilteredTaskList(p)
activate Model

loop for every task
Model -> DescriptionContainsKeywordPredicate : test(task)
activate DescriptionContainsKeywordPredicate

DescriptionContainsKeywordPredicate --> Model
deactivate DescriptionContainsKeywordPredicate

end loop

Model --> FindTaskCommand
deactivate Model

create CommandResult
FindTaskCommand -> CommandResult
activate CommandResult

CommandResult --> FindTaskCommand
deactivate CommandResult

FindTaskCommand --> LogicManager : result
deactivate FindTaskCommand

[<-- LogicManager
@enduml

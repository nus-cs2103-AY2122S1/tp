@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":FlashcardAppParser" as FlashcardAppParser LOGIC_COLOR
participant ":FindCommandParser" as FindCommandParser LOGIC_COLOR
participant "findCommand:FindCommand" as FindCommand LOGIC_COLOR
participant "result:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "predicate:PhraseContainsKeywordsPredicate" as PhraseContainsKeywordsPredicate MODEL_COLOR
participant ":ModelManager" as Model MODEL_COLOR
end box

[->LogicManager : execute("find e/Hello")
activate LogicManager

LogicManager -> FlashcardAppParser : parseCommand("find e/hello")
activate FlashcardAppParser

create FindCommandParser
FlashcardAppParser -> FindCommandParser
activate FindCommandParser

FindCommandParser --> FlashcardAppParser
deactivate FindCommandParser

FlashcardAppParser -> FindCommandParser : parse("e/hello")
activate FindCommandParser

create PhraseContainsKeywordsPredicate
FindCommandParser -> PhraseContainsKeywordsPredicate
activate PhraseContainsKeywordsPredicate

PhraseContainsKeywordsPredicate --> FindCommandParser : predicate
deactivate PhraseContainsKeywordsPredicate

create FindCommand
FindCommandParser -> FindCommand
activate FindCommand

FindCommand --> FindCommandParser : findCommand
deactivate FindCommand

FindCommandParser --> FlashcardAppParser : findCommand
deactivate FindCommandParser

FlashcardAppParser --> LogicManager : findCommand
deactivate FlashcardAppParser

LogicManager -> FindCommand : execute()
activate FindCommand

FindCommand -> Model : updateFilteredFlashcardList(predicate)
activate Model

Model --> FindCommand
deactivate Model

create CommandResult
FindCommand -> CommandResult
activate CommandResult

CommandResult --> FindCommand:result
deactivate CommandResult

FindCommand --> LogicManager : result
deactivate FindCommand

[<--LogicManager:result
deactivate LogicManager

@enduml

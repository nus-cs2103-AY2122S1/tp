import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'application'
    id 'jacoco'
}

mainClassName = 'donnafin.Main'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

run {
    enableAssertions(true);
}

checkstyle {
    toolVersion = '8.29'
}

clean.doFirst {
    delete "${rootDir}/data/"
    delete "${rootDir}/config.json"
    delete "${rootDir}/preferences.json"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

dependencies {
    String testFxVersion = '4.0.15-alpha'
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '11'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation group: 'org.testfx', name: 'testfx-core', version: testFxVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-12.0.1+2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveName = 'donnafin.jar'
}

task(guiTests)
task(nonGuiTests)

// Run `test` task if `guiTests` or `nonGuiTests` is specified
guiTests.dependsOn test
nonGuiTests.dependsOn test

task(allTests)

// `allTests` implies both `guiTests` and `nonGuiTests`
allTests.dependsOn guiTests
allTests.dependsOn nonGuiTests

test {
    systemProperty 'testfx.setup.timeout', '60000'

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED

        // Prints the currently running test's name in the CI's build log,
        // so that we can check if tests are being silently skipped or
        // stalling the build.
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }

    doFirst {
        boolean runGuiTests = gradle.taskGraph.hasTask(guiTests)
        boolean runNonGuiTests = gradle.taskGraph.hasTask(nonGuiTests)

        // Default to running all.
        if (!runGuiTests && !runNonGuiTests) {
            runGuiTests = true
            runNonGuiTests = true
        }

        if (runNonGuiTests) {
            test.include 'donnafin/**'
        }

        if (runGuiTests) {
            test.include 'donnafin/ui/**'
        }

        if (!runGuiTests) {
            test.exclude 'donnafin/ui/**'
        }
    }
}

defaultTasks 'clean', 'allTests'
